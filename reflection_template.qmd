---
title: "STAT 331 Portfolio"
author: "Elise Donaho"
theme: minty
format:
  html:
    toc: true
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  error: true
  echo: true
  warnings: false
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_A-\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1: **Lab 3 Question 2**

```{r}
#| label: wd-1-csv-1

#using the here::here function to easily look for files already put into the working directory

teacher_evals <- read_csv(here::here("Week 3", "teacher_evals.csv"))

```

-   `csv` Example 2: **Lab 2 Question 1**

```{r}
#| label: wd-1-csv-2

surveys <- read_csv(here::here("Week 2", "surveys.csv"))

```

-   `xlsx:`**Check-In 2.3: Loading Data**

```{r}
#| label: wd-1-xlsx


ages <- read_excel(here::here("ages.xlsx"))
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns: **Lab 3 Question 5**

```{r}
#| label: wd-2-ex-1

teacher_evals_clean <- teacher_evals |> 
  rename(sex=gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |> 
  select(course_id, teacher_id, 
         question_no, no_participants, resp_share, #<- selecting solely these columns
         SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex)

```

-   Example removing specified columns: **Lab 3 Question 5 - Modified**

```{r}
#| label: wd-2-ex-2

#modified from lab 3 to remove columns instead of solely select

teacher_evals_clean <- teacher_evals |> 
  rename(sex=gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)) |> 
  select(-course_id, -teacher_id, #selecting all columns BUT these 3 (removing the 3)
         -question_no)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`) **Lab 4 Question 7**

```{r}
#| label: wd-2-ex-3

recreate_plot <- ca_childcare |> 
  select(county_name, 
         study_year, 
         starts_with("mc_"), # find columns that have names that start with mc_
         census_region) |>
  pivot_longer(cols = mc_infant:mc_preschool,
             names_to = "age",
             values_to = "price") |> 
  mutate(age = case_when(age == "mc_infant" ~ "Infant",
                         age == "mc_toddler" ~ "Toddler",
                         age == "mc_preschool" ~ "Preschool",
                         TRUE ~ age),
    census_region = fct_reorder2(.f = census_region, .x = study_year, 
                 .y = price, 
                .desc = TRUE))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1: **Lab 4 Question 5 - Revised**

```{r}
#| label: wd-3-numeric-ex-1

#Feedback: Amazing column names!!!!
#I would recommend using the %in% operator instead of the or!

median_inc_change <- ca_childcare |> 
  select(county_name, 
         study_year, 
         census_region, 
         mhi_2018) |> 
  filter(study_year %in% c(2008,2018)) |> 
  pivot_wider (names_from = study_year,
               values_from = mhi_2018) |> 
  group_by(census_region) |> 
  summarize(
    median_2018 = median(`2018`),
    median_2008 = median(`2008`),
    .groups = "drop" ) |> 
  arrange(desc(median_2018))

```

-   Numeric Example 2: **Lab 4 Question 6**

```{r}
#| label: wd-3-numeric-ex-2

ca_childcare |> 
  filter(study_year == 2018) |> 
  select (county_name, census_region, mc_infant, study_year) |> 
  group_by(census_region) |> 
  summarize(
    region_median_mc_infant = median(mc_infant),
    .groups = "drop") |> 
  slice_min(region_median_mc_infant) #add this to get the exact answer

```

-   Character Example 1 (any context): **Lab 3 Question 12 - Revised**

```{r}
#| label: wd-3-character

#Feedback: I would recommend using the %in% operator instead of the or!
#Look at your output! You have the same row repeated 6 times! Is there a way to get only one row with this information?

teacher_evals_clean |> 
  filter(academic_degree %in% c("dr","prof"))|>
  group_by(teacher_id, sex, seniority) |>
  summarize(
    avg_percent_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop")|> 
      filter(avg_percent_resp %in% c(min(avg_percent_resp),max(avg_percent_resp))) |> 
  arrange(desc(avg_percent_resp))

```

-   Character Example 2 (example must use functions from **stringr**): **Lab 5 Find Witnesses - Revised**

```{r}
#| label: wd-3-string

witness2 <- detective |> 
  filter(
    (str_detect(name,
             pattern = "(A|a)nnabel") & address_street_name == "Franklin Ave"))
```

-   Date (example must use functions from **lubridate**): **Modified from Lab 5 Identify Suspects - Revised**

```{r}
#| label: wd-3-date

detective <- detective |> 
mutate(
  check_in_date = ymd(check_in_date)) |> # make check_in_date a date data type so we can use date functions on it!
  filter(membership_status == "gold",
         month(check_in_date) == 1,
         day(check_in_date) == 9,
         str_detect(membership_id,
                    pattern = "^48Z"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1



```

-   Numeric Example 2 **Challenge 3 Question 3**

```{r}
#| label: wd-4-numeric-ex-2


teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    SET_level = if_else(SET_score_avg >= 4,"excellent", "standard"),
    sen_level = case_when(
                    seniority <= 4 ~ "junior", 
                    seniority <= 8 ~ "senior",
                    seniority > 8 ~ "very senior")) |> 
  select(course_id, SET_level, sen_level)


```

-   Factor Example 1 (renaming levels) **Lab 4 Question 4**

```{r}
#| label: wd-4-factor-ex-1

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
      census_region = fct_collapse(.f = county_name,
               "Superior" = superior_counties,
               "North Coast" = north_coast_counties,
               "San Francisco" = san_fran_counties,
               "North San Joaquin" = n_san_joaquin_counties,
               "Central Coast" = central_coast_counties,
               "South San Joaquin" = s_san_joaquin_counties,
               "Inland" = inland_counties,
               "Los Angeles" = la_county,
               "Orange County" = orange_county,
               "San Diego" = san_diego_imperial_counties ))

```

-   Factor Example 2 (reordering levels) **Lab 4 Question 7 - Revised**

```{r}
#| label: wd-4-factor-ex-2

#Feedback: Nice work pivoting and modifying the age variable! Nice dollar signs!!! Can you reorder the colors in the legend so they appear in the same order as the lines in the plot? I am specifically looking for a tool that does the reordering for you since doing the reordering by hand is not a robust programming practice!

recreate_plot <- ca_childcare |> 
  select(county_name, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool, 
         census_region) |>
  pivot_longer(cols = mc_infant:mc_preschool,
             names_to = "age",
             values_to = "price") |> 
  mutate(age = case_when(age == "mc_infant" ~ "Infant",
                         age == "mc_toddler" ~ "Toddler",
                         age == "mc_preschool" ~ "Preschool",
                         TRUE ~ age),
    census_region = fct_reorder2(.f = census_region, .x = study_year, 
                 .y = price, 
                .desc = TRUE))
```

-   Character (example must use functions from **stringr**) **Lab 5 Identify Suspects - Modified**

```{r}
#| label: wd-4-string

detective |> 
  mutate(
    potential_suspect = if_else(
                    str_detect(membership_id,
                              pattern = "^48Z"),
                    1, 0)
  )

```

-   Date (example must use functions from **lubridate**) **Lab 5 Identify Suspects**

```{r}
#| label: wd-4-date

detective <- detective |> 
mutate(
  check_in_date = ymd(check_in_date)
)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1 **Lab 4 Question 3**

```{r}
#| label: wd-5-left-ex-1

ca_childcare <- left_join(x = ca_childcare,
           y = tax_rev,
          by = join_by(study_year == year, county_name == entity_name))

```

-   `right_join()` Example 1 **Lab 4 Question 3 Revised**

```{r}
#| label: wd-5-right

#modified to be a right join that has the same function as a left join (switched the variables)

ca_childcare <- right_join(x = tax_rev,
           y = ca_childcare,
          by = join_by(study_year == year, county_name == entity_name))

```

-   `left_join()` **or** `right_join()` **Lab 5 Data Join - Revised**

```{r}
#| label: wd-5-left-right-ex-2

detective <- get_fit_now_check_in |> 
    left_join(get_fit_now_member,
        join_by(membership_id == id))

```

-   `inner_join()` Example 1 **Lab 5 Data Join - Revised**

```{r}
#| label: wd-5-inner-ex-1

#this was originally a left join but we want to keep only the values that match to find the suspect, inner join is better

detective <- get_fit_now_check_in |> 
    inner_join(person,
              join_by(person_id == id, name))

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()` - will add this in pending Lab 5 Revisions

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()` **Lab 4 Question 7**

```{r}
#| label: wd-7-long

recreate_plot <- ca_childcare |> 
  select(county_name, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool, 
         census_region) |>
  pivot_longer(cols = mc_infant:mc_preschool,
             names_to = "age",
             values_to = "price") |> 
  mutate(age = case_when(age == "mc_infant" ~ "Infant",
                         age == "mc_toddler" ~ "Toddler",
                         age == "mc_preschool" ~ "Preschool",
                         TRUE ~ age),
    census_region = fct_reorder2(.f = census_region, .x = study_year, 
                 .y = price, 
                .desc = TRUE))

```

-   `pivot_wider()` **Lab 4 Question 5**

```{r}
#| label: wd-7-wide

median_inc_change <- ca_childcare |> 
  select(county_name, 
         study_year, 
         census_region, 
         mhi_2018) |> 
  filter(study_year %in% c(2008,2018)) |> 
  pivot_wider (names_from = study_year,
               values_from = mhi_2018) |> 
  group_by(census_region) |> 
  summarize(
    median_2018 = median(`2018`),
    median_2008 = median(`2008`),
    .groups = "drop" ) |> 
  arrange(desc(median_2018))
```

## Reproducibility - will fill in with more assignments because already submitted revisions

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 5
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code. -** do i need to inlcude notes in these?

-   Example of **ggplot2** plotting **Challenge 3 Question 2**

```{r}
#| label: r-2-1

ggplot(data = teacher_evals_compare, 
      mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = label_percent()) +
  scale_fill_manual(
    values = c(
       "excellent" = "#B297D0",
       "standard" = "#B49664")) +
  theme_bw() +
  theme(legend.position = "top") +
  labs(title= "Evalutation of Teachers' Use of Activities",
      x = "Years of Experience",
      y = NULL,
      fill = "Evaluation Rating")

```

-   Example of **dplyr** pipeline **Lab 4 Question 5**

```{r}
#| label: r-2-2

median_inc_change <- ca_childcare |> 
  select(county_name, 
         study_year, 
         census_region, 
         mhi_2018) |> 
  filter(study_year %in% c(2008,2018)) |> 
  pivot_wider (names_from = study_year,
               values_from = mhi_2018) |> 
  group_by(census_region) |> 
  summarize(
    median_2018 = median(`2018`),
    median_2008 = median(`2008`),
    .groups = "drop" ) |> 
  arrange(desc(median_2018))

```

-   Example of function formatting - what is this?

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables **Lab 2 Question 16**

```{r}
#| label: dvs-1-num

ggplot(data = surveys, 
    mapping = aes(x = species, y = weight)) +
    geom_jitter(width = 0.2, 
                    height = 0, 
                    alpha = 0.2, 
                    color = "darkseagreen") +
    geom_boxplot(color = "darkgreen", 
                   outliers = FALSE, 
                   alpha = 0) +
    coord_flip() +
    theme_bw() +
        labs(
          title = "Comparing Weight and Species",
           x = "Species",
          y = "Weight (g)"
        )
```

-   At least one numeric variable and one categorical variable **Challenge 3 Question 2**

```{r}
#| label: dvs-2-num-cat

ggplot(data = teacher_evals_compare, 
      mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = label_percent()) +
  scale_fill_manual(
    values = c(
       "excellent" = "#B297D0",
       "standard" = "#B49664")) +
  theme_bw() +
  theme(legend.position = "top") +
  labs(title= "Evalutation of Teachers' Use of Activities",
      x = "Years of Experience",
      y = NULL,
      fill = "Evaluation Rating")
```

-   At least two categorical variables **Lab 4 Question 7**

```{r}
#| label: dvs-2-cat

ggplot(data = recreate_plot, 
        mapping = aes(x = study_year, y = price, color = census_region)) +
    geom_point(size = 0.75) +
    geom_smooth(linewidth = 0.75) +
    facet_wrap(~factor(age, c("Infant", "Toddler", "Preschool"))) +
    scale_y_continuous(
                    labels = scales::dollar_format(
                      prefix = "$", big.mark = ",")) +
    scale_x_continuous(
             breaks = seq(2008, 2018, by = 2),  # only show every 2 years
             limits = c(2008, 2018)) +
    theme_bw(base_size = 10) +
    theme(aspect.ratio = 1.25, 
            axis.text.x = element_text(angle = 30)) +
    labs(
         title = "Weekly Median Price for Center-Based Childcare ($)",
         x = "Study Year",
         y = NULL,
        color = "California Region") +
    scale_color_manual(values = mycolors)
```

-   Dates (time series plot) **Challenge 4 Plot Data**

```{r}
#| label: dvs-2-date

ggplot(data = my_research_long, 
        mapping = aes(x = study_year, y = price, color = care_type)) +
        geom_point() +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~census_region, scales = "free", ncol = 3) +
        scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
        scale_x_continuous(
             breaks = seq(2008, 2018, by = 2)) + # only show every 2 years
        theme_bw(base_size = 12) +
        theme(aspect.ratio = 1.25, axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Toddler Childcare for Regions in California ($)",
           x = "Study Year",
           y = NULL,
           color = "Type of Care")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable **Lab 2 Question 4**

```{r}
#| label: dvs-2-ex-1

ggplot(data = surveys, 
        mapping = aes(x = weight, y = hindfoot_length)) +
    geom_point(alpha = 0.2) +
    theme_bw() +
    facet_wrap(~species, scales = "free") +
    labs(
        title = "Comparing Weight and Hindfoot Length Between Species",
        x = "Weight (g)",
        y = NULL,
          subtitle = "Hindfoot Length (mm)")
  
```

-   I can modify my colors to be accessible to anyone's eyes **Lab 4 Question 7**

```{r}
#| label: dvs-2-ex-2

mycolors<- colorRampPalette(brewer.pal(7, "Accent"))(10) #take color palette that has only 7 colors into 10
  
ggplot(data = recreate_plot, 
        mapping = aes(x = study_year, y = price, color = census_region)) +
        geom_point(size = 0.75) +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~factor(age, c("Infant", "Toddler", "Preschool"))) +
         scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
         scale_x_continuous(
             breaks = seq(2008, 2018, by = 2),  # only show every 2 years
             limits = c(2008, 2018)) +
        theme_bw(base_size = 10) +
        theme(aspect.ratio = 1.25, axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Center-Based Childcare ($)",
           x = "Study Year",
           y = NULL,
           color = "California Region") +
  scale_color_manual(values = mycolors)
```

-   I can modify my plot titles to clearly communicate the data context **Challenge 4 Plot of the Data**

```{r}
#| label: dvs-2-ex-3

ggplot(data = my_research_long, 
        mapping = aes(x = study_year, y = price, color = care_type)) +
        geom_point() +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~census_region, scales = "free", ncol = 3) +
        scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
        scale_x_continuous(
             breaks = seq(2008, 2018, by = 2)) + # only show every 2 years
        theme_bw(base_size = 12) +
        theme(aspect.ratio = 1.25, axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Toddler Childcare for Regions in California ($)",
           x = "Study Year",
           y = NULL,
           color = "Type of Care")
```

-   I can modify the text in my plot to be more readable **Lab 2 Question 8**

```{r}
#| label: dvs-2-ex-4

ggplot(data = surveys, 
        mapping = aes(x = species, y = weight)) +
        geom_jitter(width = 0.2, 
                    height = 0, 
                    alpha = 0.2, 
                    color = "darkseagreen")+
   geom_boxplot(color = "darkgreen", 
                outliers = FALSE, 
                alpha = 0) +
   theme_bw() +
   theme(axis.text.x = element_text(angle = -45)) + #titlting x axis labels for readability
        labs(
          title = "Comparing Weight and Species",
           x = "Species",
          y = "Weight (g)"
        )
```

-   I can reorder my legend to align with the colors in my plot **Lab 4 Question 7**

```{r}
#| label: dvs-2-ex-5

#reorder legend using fct_reorder and then plotting with ggplot

recreate_plot <- ca_childcare |> 
  select(county_name, 
         study_year, 
         mc_infant, 
         mc_toddler, 
         mc_preschool, 
         census_region) |>
  pivot_longer(cols = mc_infant:mc_preschool,
             names_to = "age",
             values_to = "price") |> 
  mutate(age = case_when(age == "mc_infant" ~ "Infant",
                         age == "mc_toddler" ~ "Toddler",
                         age == "mc_preschool" ~ "Preschool",
                         TRUE ~ age),
    census_region = fct_reorder2(.f = census_region, .x = study_year, #using factor reorder for legend order
                 .y = price, 
                .desc = TRUE))
library(RColorBrewer)

mycolors<- colorRampPalette(brewer.pal(7, "Accent"))(10) #take color palette that has only 7 colors into 10
  
ggplot(data = recreate_plot, 
        mapping = aes(x = study_year, y = price, color = census_region)) + #this will be ordered now
        geom_point(size = 0.75) +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~factor(age, c("Infant", "Toddler", "Preschool"))) +
         scale_y_continuous(labels = scales::dollar_format(
                                prefix = "$", big.mark = ",")) +
         scale_x_continuous(
             breaks = seq(2008, 2018, by = 2),  # only show every 2 years
             limits = c(2008, 2018)) +
        theme_bw(base_size = 10) +
        theme(aspect.ratio = 1.25, 
              axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Center-Based Childcare ($)",
           x = "Study Year",
           y = NULL,
           color = "California Region") +
  scale_color_manual(values = mycolors)
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1) **Challenge 2 Spicy**

```{r}
#| label: dvs-3-1-ex-1

ggplot(data = surveys, 
        mapping = aes(x = species, y = weight)) +
        geom_jitter(width = 0.2, 
                    height = 0, 
                    alpha = 0.2, 
                    color = "darkseagreen")+
       geom_boxplot(alpha = 0, 
                  color = "darkgreen",
                  outliers = FALSE,
                  median.color= "black",
                  median.linewidth = 0.75, 
                  box.linewidth= 0.25) +
        theme_bw(base_size = 14, base_family = "times new roman") +
   theme(axis.text.x = element_text(angle = 30),
         panel.border = element_rect(colour = "darkgreen", linewidth=2)) +
        labs(
          title = "Comparing Median Weight between Rodent Species",
           x = "Species",
          y = "Weight" 
        )
```

-   I can use non-standard colors (Example 2) - **Challenge 4 Plot of the Data**

```{r}
#| label: dvs-3-1-ex-2

mycoolcolors =colorRampPalette(brewer.pal(7, "Accent"))(10)

ggplot(data = my_research_long, 
        mapping = aes(x = study_year, y = price, color = care_type)) +
        geom_point() +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~census_region, scales = "free", ncol = 3) +
        scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
        scale_x_continuous(
             breaks = seq(2008, 2018, by = 2)) + # only show every 2 years
        theme_bw(base_size = 12) +
        theme(aspect.ratio = 1.25, axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Toddler Childcare for Regions in California ($)",
           x = "Study Year",
           y = NULL,
           color = "Type of Care") +
      scale_color_manual(values = mycoolcolors)
        
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()` **Challenge 4 Summary Table**

```{r}
#| label: dvs-4-summarize

region_summary <- my_research |> 
  group_by(census_region) |> 
  summarize(
    avg_mc_toddler   = mean(mc_toddler),
    avg_mfcc_toddler = mean(mfcc_toddler),
    avg_mc_mfcc_gap  = mean(mc_toddler - mfcc_toddler),
    .groups = "drop") |> 
    arrange(desc(avg_mc_mfcc_gap)) |> 
  rename( "Average Center-based" =  avg_mc_toddler, 
           "Average In-Home" = avg_mfcc_toddler,
          "Difference (CB-IH)" = avg_mc_mfcc_gap,
          "Census Region" = census_region)

```

-   Example using `across()` - look for revision opportunity

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1 **Lab 3 Question 12**

```{r}
#| label: dvs-5-1

#Feedback: I would recommend using the %in% operator instead of the or! Look at your output! You have the same row repeated 6 times! Is there a way to get only one row with this information?

teacher_evals_clean |> 
  filter(academic_degree %in% c("dr","prof"))|>
  group_by(teacher_id, sex, seniority) |>
  summarize(
    avg_percent_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop")|> 
      filter(avg_percent_resp %in% c(min(avg_percent_resp),max(avg_percent_resp))) |> 
  arrange(desc(avg_percent_resp))
```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context **Challenge 4 Summary Table**

```{r}
#| label: dvs-6-ex-1
region_summary <- my_research |> 
  group_by(census_region) |> 
  summarize(
    avg_mc_toddler   = mean(mc_toddler),
    avg_mfcc_toddler = mean(mfcc_toddler),
    avg_mc_mfcc_gap  = mean(mc_toddler - mfcc_toddler),
    .groups = "drop") |> 
  arrange(desc(avg_mc_mfcc_gap)) |> 
  rename( "Average Center-based" =  avg_mc_toddler, 
           "Average In-Home" = avg_mfcc_toddler,
          "Difference (CB-IH)" = avg_mc_mfcc_gap,
          "Census Region" = census_region)
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering **Lab 4 Question 5**

```{r}
#| label: dvs-6-ex-3

median_inc_change <- ca_childcare |> 
  select(county_name, 
         study_year, 
         census_region, 
         mhi_2018) |> 
  filter(study_year %in% c(2008,2018)) |> 
  pivot_wider (names_from = study_year,
               values_from = mhi_2018) |> 
  group_by(census_region) |> 
  summarize(
    median_2018 = median(`2018`),
    median_2008 = median(`2008`),
    .groups = "drop" ) |> 
  arrange(desc(median_2018)) #arrange in descending order to find highest median income
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls) **Lab 5 Identify Murderer**

```{r}
#| label: pe-1-one-call

detective |> 
  filter(hair_color == "red", 
         gender == "female", 
         car_make == "Tesla", 
         car_model == "Model S", 
         between(height, 65, 67), 
         event_name == "SQL Symphony Concert") |> 
  summarize(name)

```

-   using `across()` - come back for this one

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3: I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2


```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

ggplot(data = my_research_long, 
        mapping = aes(x = study_year, y = price, color = care_type)) +
        geom_point() +
        geom_smooth(linewidth = 0.75) +
        facet_wrap(~census_region, scales = "free", ncol = 3) +
        scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) + #dollar format is a modern tool
        scale_x_continuous(
             breaks = seq(2008, 2018, by = 2)) + # only show every 2 years
        theme_bw(base_size = 12) +
        theme(aspect.ratio = 1.25, axis.text.x = element_text(angle = 30)) +
        labs(
          title = "Weekly Median Price for Toddler Childcare for Regions in California ($)",
           x = "Study Year",
           y = NULL,
           color = "Type of Care")
```

-   I can connect a data wrangling pipeline into a `ggplot()` **Lab 4 Question 8 Modified**

```{r}
#| label: pe-4-2


ca_childcare |> ggplot(mapping = aes(x = mhi_2018, y = mc_infant)) +
        geom_point() +
        geom_smooth(method = lm)+
    scale_y_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
    scale_x_continuous(labels = scales::dollar_format(prefix = "$", big.mark = ",")) +
    theme_bw() +
    labs(
      title = "Relationship Between CA Income and Price of Center-Based Childcare for Infants",
      x = "Median Household Income (2018 Dollars)",
      y = "Median Price of Childcare" )
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1 **Lab 2 Question 17**

```{r}
#| label: dsm-2-1

aov(weight ~ species, data = surveys)
```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

I think I have been challenged to think more about efficiency throughout this course. I've definitely learned that there is often an easier way to perform tasks when I am aware of the correct functions. This takes practice, but I think I am growing in recognizing shortcuts better. I revised my thinking my starting from square 1 on many problems, and envisioning the different ways to attack a problem. I often did this by writing down what I wanted to do on a piece of paper, and then translating that into functions that I know how to use. Its a bit frustrating when I see that there are shorter ways to do things, even when my way was successful, but that is part of learning code efficiency over time!

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I have extended my thinking by constantly searching through resources and Stack Overflow for more efficient solutions to problems. I like to be creative with my plots, so I tried my best to customize as much as possible using outside research and the tools at my disposal. I think I went above and beyond when it came to open-ended analysis because this is the kind of work that I want to be doing in the future. I am really trying to hone these skills so I can be prepared and make clear visualizations and reports.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

My feedback:

"First of all, I love the theme of your output! The white font is a little small and hard to read on the background but still super cute!"

"Make sure when you load in your data and libraries that you put {r, message=FALSE} in each code chunk to silence the messages. It took me forever to figure out where to put it, but it helps readability!"

I think it is really important to lift people up for going the extra mile for creativity. I also makes me feel really good in a peer review when I know that I am struggling through concepts alongside my fellow students. That makes the advice even more valuable. It took me a long time to consistently have professional report skills, so I wanted to share that knowledge.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

It was difficult to be the "computer" role during collaboration because I wanted to give the answer to the problem immediately when I identify it. However, I think that I learn best when challenged in the role of the coder, so I am trying my best to honor that experience for others. Having mutual respect for the process of trial and error with another partner has really garnered a positive space to grow. I think I am doing a better job at asking questions and helping others to find solutions on their own!
